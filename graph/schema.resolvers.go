package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"os"
	"path/filepath"

	"github.com/DanteMichaeli/CookBookAPI/graph/model"
)

// CreateRecipe is the resolver for the createRecipe field. Creates a recipe from the given input, stores it in the recipes directory as a JSON file.
func (r *mutationResolver) CreateRecipe(ctx context.Context, input model.CreateRecipeInput) (*model.Response, error) {
	// check if id is empty
	err := idExists(input.ID)
	if err != nil {
		return nil, err
	}

	// instantiate recipe
	recipe := convertToRecipe(input)

	// encode to JSON
	recipeJSON, err := encodeRecipe(recipe)
	if err != nil {
		return nil, err
	}

	// Write recipe to directory
	err = writeToDir(input.ID, recipeJSON)
	if err != nil {
		return nil, err
	}

	recipes := []*model.Recipe{recipe}
	return &model.Response{Message: "Recipe created", Recipe: recipes}, nil
}

// UpdateRecipe is the resolver for the updateRecipe field. Updates data of an existing recipe (ID immutable)
func (r *mutationResolver) UpdateRecipe(ctx context.Context, input model.UpdateRecipeInput) (*model.Response, error) {
	// check if id is empty
	err := idNotExist(input.ID)
	if err != nil {
		return nil, err
	}

	// find and decode recipe JSON file
	recipe, err := decodeRecipe(input.ID)
	if err != nil {
		return nil, err
	}

	// update recipe with provided fields ID
	if input.Title != nil {
		recipe.Title = *input.Title
	}
	if input.Description != nil {
		recipe.Description = *input.Description
	}
	if input.Ingredients != nil {
		recipe.Ingredients = input.Ingredients
	}
	if input.Steps != nil {
		recipe.Steps = input.Steps
	}

	// encode updated recipe to JSON
	recipeJSON, err := encodeRecipe(recipe)
	if err != nil {
		return nil, err
	}

	// write updated recipe to directory
	err = writeToDir(input.ID, recipeJSON)
	if err != nil {
		return nil, err
	}

	recipes := []*model.Recipe{recipe}

	return &model.Response{Message: "Recipe updated", Recipe: recipes}, nil
}

// DeleteRecipe is the resolver for the deleteRecipe field.
func (r *mutationResolver) DeleteRecipe(ctx context.Context, id string) (*model.Response, error) {
	// check if id is empty
	err := idNotExist(id)
	if err != nil {
		return nil, err
	}

	// decode JSON file for message output
	recipe, err := decodeRecipe(id)
	if err != nil {
		return nil, err
	}
	recipes := []*model.Recipe{recipe}

	// delete JSON file with corresponding ID
	fileName := fmt.Sprintf("%s.json", id)
	filePath := filepath.Join(recipesDir, fileName)
	err = os.Remove(filePath)
	if err != nil {
		return nil, err
	}

	return &model.Response{Message: "Recipe deleted", Recipe: recipes}, nil
}

// Recipes is the resolver for the recipes field. If no id, list all recipes, otherwise list recipe with that ID.
func (r *queryResolver) Recipes(ctx context.Context, id []string) (*model.Response, error) {
	var recipes []*model.Recipe
	var err error

	// if no id, list all recipes
	if id == nil {
		recipes, err = listAll()
		if err != nil {
			return nil, err
		}

	} else if len(id) == 0 {
		return nil, fmt.Errorf("no recipe ID(s) provided")

	} else {
		// List recipes with given IDs
		recipes, err = listWithID(id)
		if err != nil {
			return nil, err
		}
	}
	return &model.Response{Message: "Recipe(s) listed", Recipe: recipes}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
