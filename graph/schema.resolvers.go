package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"os"
	"path/filepath"

	"github.com/DanteMichaeli/CookBookAPI/graph/model"
)

// CreateRecipe is the resolver for the createRecipe field. Creates a recipe from the given input, stores it in the recipes directory as a JSON file.
func (r *mutationResolver) CreateRecipe(ctx context.Context, id string, title string, description string, ingredients []string, steps []string) (*model.Response, error) {
	// check if id is empty
	err := idExists(id)
	if err != nil {
		return &model.Response{Success: false, Message: "Failed to create recipe."}, err
	}

	// instantiate recipe
	recipe := model.Recipe{
		ID:          id,
		Title:       title,
		Description: description,
		Ingredients: ingredients,
		Steps:       steps,
	}

	// encode to JSON
	recipeJSON, err := encodeRecipe(&recipe)
	if err != nil {
		return &model.Response{Success: false, Message: "Failed to create recipe.", Recipe: nil}, err
	}

	// Write recipe to directory
	err = writeToDir(id, recipeJSON)
	if err != nil {
		return &model.Response{Success: false, Message: "Failed to create recipe.", Recipe: nil}, err
	}

	recipes := []*model.Recipe{&recipe}

	return &model.Response{Success: true, Message: "Recipe created successfully.", Recipe: recipes}, nil
}

// UpdateRecipe is the resolver for the updateRecipe field. Updates data of an existing recipe (ID immutable)
func (r *mutationResolver) UpdateRecipe(ctx context.Context, id string, title *string, description *string, ingredients []string, steps []string) (*model.Response, error) {
	// check if id is empty
	err := idNotExist(id)
	if err != nil {
		return &model.Response{Success: false, Message: "Failed to update recipe.", Recipe: nil}, err
	}

	// find and decode recipe JSON file
	recipePtr, err := decodeRecipe(id)
	if err != nil {
		return &model.Response{Success: false, Message: "Failed to update recipe.", Recipe: nil}, err
	}

	// update recipe with provided fields ID
	if title != nil {
		recipePtr.Title = *title
	}
	if description != nil {
		recipePtr.Description = *description
	}
	if ingredients != nil {
		recipePtr.Ingredients = ingredients
	}
	if steps != nil {
		recipePtr.Steps = steps
	}

	// encode updated recipe to JSON
	recipeJSON, err := encodeRecipe(recipePtr)
	if err != nil {
		return &model.Response{Success: false, Message: "Failed to update recipe.", Recipe: nil}, err
	}

	// write updated recipe to directory
	err = writeToDir(id, recipeJSON)
	if err != nil {
		return &model.Response{Success: false, Message: "Failed to update recipe.", Recipe: nil}, err
	}

	recipes := []*model.Recipe{recipePtr}

	return &model.Response{Success: true, Message: "Recipe updated successfully.", Recipe: recipes}, nil
}

// DeleteRecipe is the resolver for the deleteRecipe field.
func (r *mutationResolver) DeleteRecipe(ctx context.Context, id string) (*model.Response, error) {
	// check if id is empty
	err := idNotExist(id)
	if err != nil {
		return &model.Response{Success: false, Message: "Failed to delete recipe.", Recipe: nil}, err
	}

	// delete JSON file with corresponding ID
	fileName := fmt.Sprintf("%s.json", id)
	filePath := filepath.Join(recipesDir, fileName)
	err = os.Remove(filePath)
	if err != nil {
		return &model.Response{Success: false, Message: "Failed to delete recipe.", Recipe: nil}, err
	}

	return &model.Response{Success: true, Message: "Recipe deleted successfully.", Recipe: nil}, nil
}

// Recipes is the resolver for the recipes field. If no id, list all recipes, otherwise list recipe with that ID.
func (r *queryResolver) Recipes(ctx context.Context, id []string) (*model.Response, error) {
	var recipes []*model.Recipe = nil
	if id == nil {
		// list all recipes
		files, err := os.ReadDir(recipesDir)
		if err != nil {
			return nil, fmt.Errorf("error reading recipes directory: %w", err)
		}

		recipes = []*model.Recipe{}
		for _, file := range files {
			recipePtr, err := decodeRecipe(file.Name())
			if err != nil {
				return nil, err
			}
			recipes = append(recipes, recipePtr)
		}
	} else {
		// list recipe with given ID
		recipes = []*model.Recipe{}
		for _, recipeID := range id {
			recipePtr, err := decodeRecipe(recipeID)
			if err != nil {
				return nil, err
			}
			recipes = append(recipes, recipePtr)
		}

	}
	return &model.Response{Success: true, Message: "Recipe(s) listed successfully.", Recipe: recipes}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
