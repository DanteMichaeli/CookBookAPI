package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"

	"github.com/DanteMichaeli/CookBookAPI/graph/model"
)

// CreateRecipe is the resolver for the createRecipe field.
func (r *mutationResolver) CreateRecipe(ctx context.Context, id string, title string, description string, image *string, ingredients []string, steps []string) (*model.Recipe, error) {
	panic(fmt.Errorf("not implemented: CreateRecipe - createRecipe"))
}

// UpdateRecipe is the resolver for the updateRecipe field.
func (r *mutationResolver) UpdateRecipe(ctx context.Context, title string, description *string, image *string, ingredients []string, steps []string) (*model.Recipe, error) {
	panic(fmt.Errorf("not implemented: UpdateRecipe - updateRecipe"))
}

// DeleteRecipe is the resolver for the deleteRecipe field.
func (r *mutationResolver) DeleteRecipe(ctx context.Context, title string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteRecipe - deleteRecipe"))
}

// ListRecipes is the resolver for the listRecipes field.
func (r *queryResolver) ListRecipes(ctx context.Context) ([]*model.Recipe, error) {
	panic(fmt.Errorf("not implemented: ListRecipes - listRecipes"))
}

// OpenRecipe is the resolver for the openRecipe field.
func (r *queryResolver) OpenRecipe(ctx context.Context, title string) (*model.Recipe, error) {
	panic(fmt.Errorf("not implemented: OpenRecipe - openRecipe"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
